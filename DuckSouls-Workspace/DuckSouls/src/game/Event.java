package game;

import items.Clothes;
import items.Goo;
import items.Item;

/**
 * Represents an event generated by the game. Main purpose to transfer data needed for events
 * 
 * @author Colin Au Yeung
 *
 */

public class Event {

	/*
	 *
	 * INSTANCE VARIABLES
	 * 
	 */
	private Event_type type = Event_type.NOEVENT;
	private String nextworld = null;
	private Item item = new Goo();
	private Item Weapon = new Clothes();
	private Item Armour = new Clothes();
	
	/*
	 * 
	 * CONSTRUCTORS
	 * 
	 */
	
	/**
	 * A constructor for a world wrap event
	 * 
	 * @param type
	 * 		The kind of event generated, defined by Event_type
	 * @param nextworld
	 * 		String containing data for the world to load new level
	 */
	public Event(Event_type type, String nextworld) {
		
		this.type = type;
		this.nextworld = nextworld;
		
	}//End of Contrustor
	
	/**
	 * Generic Constructor 
	 * 
	 * @param type
	 * 		The kind of event generated, defined by Event_type
	 */
	public Event(Event_type type) {
		
		this.type = type;
		
	}//End of Constructor
	
	
	/**
	 * Generic Event to transfer an item
	 * 
	 * @param type
	 *  		The kind of event generated, defined by Event_type
	 * @param item
	 * 		Item to be transferred
	 */
	public Event(Event_type type, Item item) {
		
		this.type = type;
		this.item = new Item(item);
		
	}
	
	/**
	 * Constructor for battle event, carries weapon and armour
	 * 
	 * @param type
	 *  		The kind of event generated, defined by Event_type (should be BATTLE)
	 *  
	 * @param weapon
	 * 		Player's Weapon
	 * 
	 * @param armour
	 * 		Player's Armour
	 */
	public Event(Event_type type, Item weapon, Item armour) {
		
		this.type = type;
		this.Weapon = weapon;
		this.Armour = armour;
		
	}//End of Contructor
	
	/**
	 * Sets instance to be a copy of another event
	 * 
	 * @param event
	 * 		event to be copied
	 */
	public void setEvent(Event event) {
		
		this.type = event.getType();
		this.item = event.getItem();
		this.Weapon = event.getWeapon();
		this.nextworld = event.getNextworld();
		
	}//End of setEvent

	/**
	 * Get item from event
	 * 
	 * @return Item stored in event
	 */
	public Item getItem() {
		
		return new Item(this.item);
		
	}//End of getItem
	
	
	/**
	 * Gets data to generate new world stored in event
	 * 
	 * @return String containing world data
	 */
	public String getNextworld() {
		
		return nextworld;
		
	}//End of getNextworld

	/**
	 * Returns the type of the event
	 * 
	 * @return Event_type
	 */
	public Event_type getType() {
		
		return type;
		
	}//End of getType
	
	
	/**
	 * Gets weapon stored in Event
	 * 
	 * @return Item - weapon stored in event
	 */
	public Item getWeapon() {
		
		return new Item(Weapon);
		
	}//End of getWeapon
	
	
	/**
	 * Returns the Armour stored in the event
	 * 
	 * @returnItem Item - Armour stored in event
	 */
	public Item getArmour() {
		
		return new Item(Armour);
		
	}//End of getArmour



}
